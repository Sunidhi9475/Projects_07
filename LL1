#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char line[100];
char csname[100];
char extsym[100];
char csaddress[100];
char startingaddress[100];
char length[100];
char addresssum[100];
char nextcsaddress[100];


int isEndLine(){
	if (line[0]=='E')
	{
		return 1;
	}
	return 0;
}

int isHeadLine(){
	if (line[0]=='H')
	{
		return 1;
	}

	return 0;
}

void getcsname(){
	char linebackup[100];
	strcpy(linebackup,line);
	char *token = strtok(linebackup," ");
	token = strtok(NULL," ");
	strcpy(csname,token);
}

void getlength(){
	char linebackup[100];
	strcpy(linebackup,line);
	char *token = strtok(linebackup," ");
	token = strtok(NULL," ");
	token = strtok(NULL," ");
	token = strtok(NULL," ");
	strcpy(length,token);
}

void getcsaddress(){
	char linebackup[100];
	strcpy(linebackup,line);
	char *token = strtok(linebackup," ");
	token = strtok(NULL," ");
	token = strtok(NULL," ");
	strcpy(csaddress,token);
}



int isDefine(){
	if (line[0]=='D')
	{
		return 1;
	}
	return 0;
}



int main() {
    printf("Enter starting address\n");
    scanf("%s", startingaddress);

    FILE *inputFP = fopen("C:\\Users\\sunid\\Desktop\\ss\\inputll.txt", "r");
    FILE *outputFP = fopen("C:\\Users\\sunid\\Desktop\\ss\\outputll.txt", "w");

    // Check if both files were opened successfully
    if (inputFP == NULL || outputFP == NULL) {
        printf("Error opening files.\n");
        return 1; // exit with an error code
    }

    while (fscanf(inputFP, "%[^\n]%*c", line) != EOF) {
        if (isEndLine()) {
            strcpy(startingaddress, nextcsaddress);
        }

        if (isHeadLine()) {
            getcsaddress();
            getcsname();
            getlength();

            char temp[100];
            sprintf(temp, "%d", atoi(startingaddress) + atoi(csaddress));
            strcpy(addresssum, temp);
            sprintf(temp, "%d", atoi(addresssum) + atoi(length));
            strcpy(nextcsaddress, temp);

            printf("%s \t\t %s %s\n", csname, addresssum, length);
            fprintf(outputFP, "%s \t\t %s %s\n", csname, addresssum, length);
        }

        if (isDefine()) {
            char linebackup[100];
            strcpy(linebackup, line);

            char *token = strtok(linebackup, " ");

            while (token != NULL) {
                token = strtok(NULL, " ");

                if (token != NULL) {
                    printf("**\t %s \t", token);
                    token = strtok(NULL, " ");
                    char temp[100];
                    sprintf(temp, "%d", atoi(addresssum) + atoi(token));
                    printf(" %s\t0\n", temp);
                    fprintf(outputFP, "**\t %s \t %s\t0\n", token, temp);
                }
            }
        }
    }

    // Close both files
    fclose(inputFP);
    fclose(outputFP);

    return 0;
}
/* INPUT
H PROGA 0000 1000
D LISTA 0040 ENDA 0054
R LISTB ENDB LISTC ENDC
T 0020 141033 465555 678909 568787 345678 T 0054 000014 789087 776555 876666 456666 M 0054 06 +LISTC
E 0000
H PROGB 0000 2000
D LISTB 0040 ENDB 0054
R LISTA ENDA LISTC ENDC
T 0020 141033 465555 678909 568787 345678 T 0054 000000 789087 776555 876666 456666 M 0054 06 +ENDA
M 0054 06 -LISTA
M 0054 06 +LISTC
E 0000
H PROGC 0000 3000
D LISTC 0040 ENDC 0054
R LISTA ENDA LISTC ENDB
T 0020 141033 465555 678909 568787 345678 T 0054 000020 789087 776555 876666 456666 M 0054 06 +ENDA
M 0054 06 -LISTA
M 0054 06 +PROGC
*/
/*
output
PROGA 		 7789 1000
**	 0040 	 7829	0
**	 0054 	 7843	0
PROGB 		 8789 2000
**	 0040 	 8829	0
**	 0054 	 8843	0
PROGC 		 10789 3000
**	 0040 	 10829	0
**	 0054 	 10843	0
*/
/*output2
PROGA 		 7000 1000
**	 LISTA 	 7040	0
**	 ENDA 	 7054	0
PROGB 		 8000 2000
**	 LISTB 	 8040	0
**	 ENDB 	 8054	0
PROGC 		 10000 3000
**	 LISTC 	 10040	0
**	 ENDC 	 10054	0
*/
